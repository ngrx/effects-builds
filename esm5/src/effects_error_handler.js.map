{"version":3,"file":"effects_error_handler.js","sourceRoot":"ng://@ngrx/effects/","sources":["src/effects_error_handler.ts"],"names":[],"mappings":";;;;;AAGA,OAAO,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;;IAOtC,4BAA4B,GAAG,EAAE;;;;;;;;AAEvC,MAAM,UAAU,0BAA0B,CACxC,WAA0B,EAC1B,YAA0B,EAC1B,gBAAuD;IAAvD,iCAAA,EAAA,+CAAuD;IAEvD,OAAO,WAAW,CAAC,IAAI,CACrB,UAAU;;;;IAAC,UAAA,KAAK;QACd,IAAI,YAAY;YAAE,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAClD,IAAI,gBAAgB,IAAI,CAAC,EAAE;YACzB,OAAO,WAAW,CAAC,CAAC,eAAe;SACpC;QACD,yDAAyD;QACzD,OAAO,0BAA0B,CAC/B,WAAW,EACX,YAAY,EACZ,gBAAgB,GAAG,CAAC,CACrB,CAAC;IACJ,CAAC,EAAC,CACH,CAAC;AACJ,CAAC","sourcesContent":["import { ErrorHandler } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nexport type EffectsErrorHandler = <T extends Action>(\n  observable$: Observable<T>,\n  errorHandler: ErrorHandler\n) => Observable<T>;\n\nconst MAX_NUMBER_OF_RETRY_ATTEMPTS = 10;\n\nexport function defaultEffectsErrorHandler<T extends Action>(\n  observable$: Observable<T>,\n  errorHandler: ErrorHandler,\n  retryAttemptLeft: number = MAX_NUMBER_OF_RETRY_ATTEMPTS\n): Observable<T> {\n  return observable$.pipe(\n    catchError(error => {\n      if (errorHandler) errorHandler.handleError(error);\n      if (retryAttemptLeft <= 1) {\n        return observable$; // last attempt\n      }\n      // Return observable that produces this particular effect\n      return defaultEffectsErrorHandler(\n        observable$,\n        errorHandler,\n        retryAttemptLeft - 1\n      );\n    })\n  );\n}\n"]}