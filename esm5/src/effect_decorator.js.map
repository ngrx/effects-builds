{"version":3,"file":"effect_decorator.js","sourceRoot":"ng://@ngrx/effects/","sources":["src/effect_decorator.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AAEtC,OAAO,EACL,qBAAqB,GAItB,MAAM,UAAU,CAAC;AAClB,OAAO,EAAE,oBAAoB,EAAE,MAAM,SAAS,CAAC;;IAEzC,YAAY,GAAG,mBAAmB;;;;;AAExC,MAAM,UAAU,MAAM,CAAC,MAAyB;IAAzB,uBAAA,EAAA,WAAyB;IAC9C;;;;;;IAAO,UACL,MAAS,EACT,YAAe;;YAET,QAAQ,kCACT,qBAAqB,GACrB,MAAM,KAAE,gDAAgD;YAC3D,YAAY,cAAA,GACb;QACD,sBAAsB,CAAI,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC9C,CAAC,EAAC;AACJ,CAAC;;;;;;AAED,MAAM,UAAU,0BAA0B,CACxC,QAAW;;QAEL,iBAAiB,GAAwB,OAAO,CACpD,wBAAwB,EACxB,oBAAoB,CACrB,CAAC,QAAQ,CAAC;IAEX,OAAO,iBAAiB,CAAC;AAC3B,CAAC;;;;;;;;AAMD,SAAS,kBAAkB,CACzB,WAAc;IAMd,OAAO,WAAW,CAAC,WAAW,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;AAC9D,CAAC;;;;;;;;AAGD,SAAS,sBAAsB,CAC7B,WAAc,EACd,QAA2B;IAE3B,IAAI,kBAAkB,CAAC,WAAW,CAAC,EAAE;QACnC,WAAW,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KACtD;SAAM;QACL,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,WAAW,EAAE,YAAY,EAAE;YAC3D,KAAK,EAAE,CAAC,QAAQ,CAAC;SAClB,CAAC,CAAC;KACJ;AACH,CAAC;;;;;;AAED,SAAS,wBAAwB,CAC/B,WAAc;IAEd,OAAO,kBAAkB,CAAC,WAAW,CAAC;QACpC,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,YAAY,CAAC;QACvC,CAAC,CAAC,EAAE,CAAC;AACT,CAAC","sourcesContent":["import { compose } from '@ngrx/store';\n\nimport {\n  DEFAULT_EFFECT_CONFIG,\n  EffectConfig,\n  EffectMetadata,\n  EffectPropertyKey,\n} from './models';\nimport { getSourceForInstance } from './utils';\n\nconst METADATA_KEY = '__@ngrx/effects__';\n\nexport function Effect(config: EffectConfig = {}) {\n  return function<T extends Object, K extends EffectPropertyKey<T>>(\n    target: T,\n    propertyName: K\n  ) {\n    const metadata: EffectMetadata<T> = {\n      ...DEFAULT_EFFECT_CONFIG,\n      ...config, // Overrides any defaults if values are provided\n      propertyName,\n    };\n    addEffectMetadataEntry<T>(target, metadata);\n  };\n}\n\nexport function getEffectDecoratorMetadata<T>(\n  instance: T\n): EffectMetadata<T>[] {\n  const effectsDecorators: EffectMetadata<T>[] = compose(\n    getEffectMetadataEntries,\n    getSourceForInstance\n  )(instance);\n\n  return effectsDecorators;\n}\n\n/**\n * Type guard to detemine whether METADATA_KEY is already present on the Class\n * constructor\n */\nfunction hasMetadataEntries<T extends Object>(\n  sourceProto: T\n): sourceProto is typeof sourceProto & {\n  constructor: typeof sourceProto.constructor & {\n    [METADATA_KEY]: EffectMetadata<T>[];\n  };\n} {\n  return sourceProto.constructor.hasOwnProperty(METADATA_KEY);\n}\n\n/** Add Effect Metadata to the Effect Class constructor under specific key */\nfunction addEffectMetadataEntry<T extends object>(\n  sourceProto: T,\n  metadata: EffectMetadata<T>\n) {\n  if (hasMetadataEntries(sourceProto)) {\n    sourceProto.constructor[METADATA_KEY].push(metadata);\n  } else {\n    Object.defineProperty(sourceProto.constructor, METADATA_KEY, {\n      value: [metadata],\n    });\n  }\n}\n\nfunction getEffectMetadataEntries<T extends object>(\n  sourceProto: T\n): EffectMetadata<T>[] {\n  return hasMetadataEntries(sourceProto)\n    ? sourceProto.constructor[METADATA_KEY]\n    : [];\n}\n"]}