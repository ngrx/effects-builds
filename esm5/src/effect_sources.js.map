{"version":3,"file":"effect_sources.js","sourceRoot":"ng://@ngrx/effects/","sources":["src/effect_sources.ts"],"names":[],"mappings":"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","sourcesContent":["import { ErrorHandler, Inject, Injectable } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { Notification, Observable, Subject, merge } from 'rxjs';\nimport {\n  dematerialize,\n  exhaustMap,\n  filter,\n  groupBy,\n  map,\n  mergeMap,\n  take,\n} from 'rxjs/operators';\n\nimport {\n  reportInvalidActions,\n  EffectNotification,\n} from './effect_notification';\nimport { EffectsErrorHandler } from './effects_error_handler';\nimport { mergeEffects } from './effects_resolver';\nimport {\n  onIdentifyEffectsKey,\n  onRunEffectsKey,\n  OnRunEffects,\n  onInitEffects,\n  isOnIdentifyEffects,\n  isOnRunEffects,\n  isOnInitEffects,\n} from './lifecycle_hooks';\nimport { EFFECTS_ERROR_HANDLER } from './tokens';\nimport { getSourceForInstance } from './utils';\n\n@Injectable()\nexport class EffectSources extends Subject<any> {\n  constructor(\n    private errorHandler: ErrorHandler,\n    @Inject(EFFECTS_ERROR_HANDLER)\n    private effectsErrorHandler: EffectsErrorHandler\n  ) {\n    super();\n  }\n\n  addEffects(effectSourceInstance: any): void {\n    this.next(effectSourceInstance);\n  }\n\n  /**\n   * @internal\n   */\n  toActions(): Observable<Action> {\n    return this.pipe(\n      groupBy(getSourceForInstance),\n      mergeMap(source$ => {\n        return source$.pipe(groupBy(effectsInstance));\n      }),\n      mergeMap(source$ => {\n        const effect$ = source$.pipe(\n          exhaustMap(sourceInstance => {\n            return resolveEffectSource(\n              this.errorHandler,\n              this.effectsErrorHandler\n            )(sourceInstance);\n          }),\n          map(output => {\n            reportInvalidActions(output, this.errorHandler);\n            return output.notification;\n          }),\n          filter(\n            (notification): notification is Notification<Action> =>\n              notification.kind === 'N'\n          ),\n          dematerialize()\n        );\n\n        // start the stream with an INIT action\n        // do this only for the first Effect instance\n        const init$ = source$.pipe(\n          take(1),\n          filter(isOnInitEffects),\n          map(instance => instance.ngrxOnInitEffects())\n        );\n\n        return merge(effect$, init$);\n      })\n    );\n  }\n}\n\nfunction effectsInstance(sourceInstance: any) {\n  if (isOnIdentifyEffects(sourceInstance)) {\n    return sourceInstance.ngrxOnIdentifyEffects();\n  }\n\n  return '';\n}\n\nfunction resolveEffectSource(\n  errorHandler: ErrorHandler,\n  effectsErrorHandler: EffectsErrorHandler\n): (sourceInstance: any) => Observable<EffectNotification> {\n  return sourceInstance => {\n    const mergedEffects$ = mergeEffects(\n      sourceInstance,\n      errorHandler,\n      effectsErrorHandler\n    );\n\n    if (isOnRunEffects(sourceInstance)) {\n      return sourceInstance.ngrxOnRunEffects(mergedEffects$);\n    }\n\n    return mergedEffects$;\n  };\n}\n"]}