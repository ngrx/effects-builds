{"version":3,"file":"effect_notification.js","sourceRoot":"ng://@ngrx/effects/","sources":["src/effect_notification.ts"],"names":[],"mappings":";;;;;;;;AAIA,wCAMC;;;IALC,oCAAkD;;IAClD,0CAA0B;;IAC1B,wCAAmB;;IACnB,4CAAoB;;IACpB,0CAAsD;;;;;;;AAGxD,MAAM,UAAU,oBAAoB,CAClC,MAA0B,EAC1B,QAAsB;IAEtB,IAAI,MAAM,CAAC,YAAY,CAAC,IAAI,KAAK,GAAG,EAAE;;cAC9B,MAAM,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK;;cAClC,eAAe,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC;QAEzC,IAAI,eAAe,EAAE;YACnB,QAAQ,CAAC,WAAW,CAClB,IAAI,KAAK,CACP,UAAU,aAAa,CACrB,MAAM,CACP,kCAAkC,SAAS,CAAC,MAAM,CAAC,EAAE,CACvD,CACF,CAAC;SACH;KACF;AACH,CAAC;;;;;AAED,SAAS,QAAQ,CAAC,MAAW;IAC3B,OAAO,CACL,OAAO,MAAM,KAAK,UAAU;QAC5B,MAAM;QACN,MAAM,CAAC,IAAI;QACX,OAAO,MAAM,CAAC,IAAI,KAAK,QAAQ,CAChC,CAAC;AACJ,CAAC;;;;;AAED,SAAS,aAAa,CAAC,EACrB,YAAY,EACZ,cAAc,EACd,UAAU,GACS;;UACb,QAAQ,GAAG,OAAO,cAAc,CAAC,YAAY,CAAC,KAAK,UAAU;IAEnE,OAAO,IAAI,UAAU,IAAI,MAAM,CAAC,YAAY,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC;AAC1E,CAAC;;;;;AAED,SAAS,SAAS,CAAC,MAAiC;IAClD,IAAI;QACF,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;KAC/B;IAAC,WAAM;QACN,OAAO,MAAM,CAAC;KACf;AACH,CAAC","sourcesContent":["import { ErrorHandler } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { Notification, Observable } from 'rxjs';\n\nexport interface EffectNotification {\n  effect: Observable<any> | (() => Observable<any>);\n  propertyName: PropertyKey;\n  sourceName: string;\n  sourceInstance: any;\n  notification: Notification<Action | null | undefined>;\n}\n\nexport function reportInvalidActions(\n  output: EffectNotification,\n  reporter: ErrorHandler\n) {\n  if (output.notification.kind === 'N') {\n    const action = output.notification.value;\n    const isInvalidAction = !isAction(action);\n\n    if (isInvalidAction) {\n      reporter.handleError(\n        new Error(\n          `Effect ${getEffectName(\n            output\n          )} dispatched an invalid action: ${stringify(action)}`\n        )\n      );\n    }\n  }\n}\n\nfunction isAction(action: any): action is Action {\n  return (\n    typeof action !== 'function' &&\n    action &&\n    action.type &&\n    typeof action.type === 'string'\n  );\n}\n\nfunction getEffectName({\n  propertyName,\n  sourceInstance,\n  sourceName,\n}: EffectNotification) {\n  const isMethod = typeof sourceInstance[propertyName] === 'function';\n\n  return `\"${sourceName}.${String(propertyName)}${isMethod ? '()' : ''}\"`;\n}\n\nfunction stringify(action: Action | null | undefined) {\n  try {\n    return JSON.stringify(action);\n  } catch {\n    return action;\n  }\n}\n"]}